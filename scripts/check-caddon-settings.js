const { createClient } = require('@supabase/supabase-js')

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå SupabaseÁí∞Â¢ÉÂ§âÊï∞„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function checkCaddonSettings() {
  try {
    console.log('üîç CADDONË®≠ÂÆö„ÅÆÁ¢∫Ë™ç„ÇíÈñãÂßã„Åó„Åæ„Åô...\n')

    // 1. ‰ºöÁ§æ‰∏ÄË¶ß„ÇíÂèñÂæó
    console.log('üìã ‰ºöÁ§æ‰∏ÄË¶ß:')
    const { data: companies, error: companiesError } = await supabase
      .from('companies')
      .select('id, name')
      .order('name')

    if (companiesError) {
      console.error('‚ùå ‰ºöÁ§æÂèñÂæó„Ç®„É©„Éº:', companiesError)
      return
    }

    companies.forEach(company => {
      console.log(`  - ${company.name} (ID: ${company.id})`)
    })

    // 2. ‰ºöÁ§æË®≠ÂÆö„ÇíÂèñÂæó
    console.log('\nüìã ‰ºöÁ§æË®≠ÂÆö (company_settings):')
    const { data: companySettings, error: settingsError } = await supabase
      .from('company_settings')
      .select('company_id, caddon_enabled')
      .order('company_id')

    if (settingsError) {
      console.error('‚ùå ‰ºöÁ§æË®≠ÂÆöÂèñÂæó„Ç®„É©„Éº:', settingsError)
      return
    }

    if (companySettings.length === 0) {
      console.log('  ‚ö†Ô∏è ‰ºöÁ§æË®≠ÂÆö„Éá„Éº„Çø„Åå„ÅÇ„Çä„Åæ„Åõ„Çì')
    } else {
      companySettings.forEach(setting => {
        const company = companies.find(c => c.id === setting.company_id)
        const companyName = company ? company.name : '‰∏çÊòé'
        console.log(`  - ${companyName}: CADDON ${setting.caddon_enabled ? 'ÊúâÂäπ' : 'ÁÑ°Âäπ'}`)
      })
    }

    // 3. „É¶„Éº„Ç∂„Éº‰∏ÄË¶ß„ÇíÂèñÂæó
    console.log('\nüìã „É¶„Éº„Ç∂„Éº‰∏ÄË¶ß:')
    const { data: users, error: usersError } = await supabase
      .from('users')
      .select('id, email, name, company_id, role')
      .order('email')

    if (usersError) {
      console.error('‚ùå „É¶„Éº„Ç∂„ÉºÂèñÂæó„Ç®„É©„Éº:', usersError)
      return
    }

    users.forEach(user => {
      const company = companies.find(c => c.id === user.company_id)
      const companyName = company ? company.name : '‰∏çÊòé'
      const setting = companySettings.find(s => s.company_id === user.company_id)
      const caddonStatus = setting ? (setting.caddon_enabled ? 'ÊúâÂäπ' : 'ÁÑ°Âäπ') : 'Êú™Ë®≠ÂÆö'
      console.log(`  - ${user.email} (${user.name}) - ${companyName} - CADDON: ${caddonStatus}`)
    })

    // 4. admin_settings„ÇÇÁ¢∫Ë™ç
    console.log('\nüìã ÁÆ°ÁêÜËÄÖË®≠ÂÆö (admin_settings):')
    const { data: adminSettings, error: adminError } = await supabase
      .from('admin_settings')
      .select('*')

    if (adminError) {
      console.error('‚ùå ÁÆ°ÁêÜËÄÖË®≠ÂÆöÂèñÂæó„Ç®„É©„Éº:', adminError)
    } else if (adminSettings.length === 0) {
      console.log('  ‚ö†Ô∏è ÁÆ°ÁêÜËÄÖË®≠ÂÆö„Éá„Éº„Çø„Åå„ÅÇ„Çä„Åæ„Åõ„Çì')
    } else {
      adminSettings.forEach(setting => {
        console.log(`  - ${setting.setting_key}: ${setting.setting_value}`)
      })
    }

  } catch (error) {
    console.error('‚ùå „Ç®„É©„Éº:', error)
  }
}

checkCaddonSettings()

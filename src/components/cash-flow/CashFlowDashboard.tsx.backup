'use client'

import { useState, useEffect } from 'react'
// Supabaseクライアントは現在使用しない
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
} from 'recharts'
import {
  AlertTriangle,
  TrendingUp,
  TrendingDown,
  DollarSign,
  Calendar,
  Target,
  Zap,
  Brain,
} from 'lucide-react'
import AIEnhancedCashFlow from './AIEnhancedCashFlow'

interface CashFlowData {
  date: string
  inflow: number
  outflow: number
  balance: number
}

interface PaymentData {
  id: string
  vendor: string
  amount: number
  dueDate: string
  type: string
  priority: number
  negotiable: boolean
}

interface FiscalInfo {
  id: string
  fiscal_year: number
  settlement_month: number
  current_period: number
  bank_balance: number
  notes: string | null
}

// インターフェース定義
interface Project {
  id: string
  name: string
  business_number: string | null
  contract_amount: number | null
  start_date: string | null
  end_date: string | null
  client_name: string | null
  status: string
}

interface Client {
  id: string
  name: string
  payment_cycle_type: string | null
  payment_cycle_closing_day: number | null
  payment_cycle_payment_month_offset: number | null
  payment_cycle_payment_day: number | null
}

interface CostEntry {
  id: string
  project_id: string | null
  entry_date: string
  amount: number
  entry_type: string
}

interface CaddonBilling {
  id: string
  billing_month: string
  amount: number
}

interface MonthlyData {
  month: number
  year: number
  amount: number
}

export default function CashFlowDashboard() {
  const [cashFlowData, setCashFlowData] = useState<CashFlowData[]>([])
  const [paymentData, setPaymentData] = useState<PaymentData[]>([])
  const [fiscalInfo, setFiscalInfo] = useState<FiscalInfo | null>(null)
  const [loading, setLoading] = useState(true)

  // 分析・レポートと同じ計算ロジック
  const calculateMonthlyRevenue = (
    projects: Project[],
    clients: Client[],
    caddonBillings: CaddonBilling[],
    fiscalInfo: any
  ): MonthlyData[] => {
    const fiscalYearStart = fiscalInfo.settlement_month + 1
    const monthlyRevenue: MonthlyData[] = []

    // 一般管理費を除外したプロジェクトを取得
    const filteredProjects = projects.filter(project =>
      !project.name.includes('一般管理費') &&
      !project.name.includes('その他経費')
    )

    filteredProjects.forEach(project => {
      const client = clients.find(c => c.name === project.client_name)

      if (project.contract_amount && project.contract_amount > 0) {
        // プロジェクトの終了日を基に収入を計上
        if (project.end_date) {
          const endDate = new Date(project.end_date)
          const revenueMonth = endDate.getMonth() + 1
          const revenueYear = endDate.getFullYear()

          // 既存のデータを検索または新規作成
          let existingData = monthlyRevenue.find(
            r => r.month === revenueMonth && r.year === revenueYear
          )

          if (existingData) {
            existingData.amount += project.contract_amount
          } else {
            monthlyRevenue.push({
              month: revenueMonth,
              year: revenueYear,
              amount: project.contract_amount
            })
          }
        }
      }
    })

    // CADDON請求も収入として計上
    caddonBillings.forEach(billing => {
      const billingDate = new Date(billing.billing_month)
      const month = billingDate.getMonth() + 1
      const year = billingDate.getFullYear()

      let existingData = monthlyRevenue.find(
        r => r.month === month && r.year === year
      )

      if (existingData) {
        existingData.amount += billing.amount
      } else {
        monthlyRevenue.push({
          month,
          year,
          amount: billing.amount
        })
      }
    })

    return monthlyRevenue
  }

  const calculateMonthlyCost = (
    costEntries: CostEntry[],
    projects: Project[]
  ): MonthlyData[] => {
    const monthlyCost: MonthlyData[] = []

    costEntries.forEach(entry => {
      const entryDate = new Date(entry.entry_date)
      const month = entryDate.getMonth() + 1
      const year = entryDate.getFullYear()

      let existingData = monthlyCost.find(
        c => c.month === month && c.year === year
      )

      if (existingData) {
        existingData.amount += entry.amount
      } else {
        monthlyCost.push({
          month,
          year,
          amount: entry.amount
        })
      }
    })

    return monthlyCost
  }

  useEffect(() => {
    fetchCashFlowData()
    fetchFiscalInfo()
  }, []) // eslint-disable-line react-hooks/exhaustive-deps

  const fetchCashFlowData = async () => {
    try {
      // 分析・レポートと同じデータソースを使用
      const supabase = createClientComponentClient()

      // プロジェクトデータを取得
      const { data: projects } = await supabase
        .from('projects')
        .select('*')
        .order('name')

      // 原価エントリーデータを取得
      const { data: costEntries } = await supabase
        .from('cost_entries')
        .select('*')
        .order('entry_date', { ascending: false })

      // クライアントデータを取得
      const { data: clients } = await supabase
        .from('clients')
        .select('*')
        .order('name')

      // CADDON請求データを取得
      const { data: caddonBillings } = await supabase
        .from('caddon_billing')
        .select('*')
        .order('billing_month')

      // 銀行残高履歴データをAPIから取得
      const historyResponse = await fetch('/api/bank-balance-history')
      const historyData = await historyResponse.json()

      // 決算情報を取得
      const fiscalResponse = await fetch('/api/fiscal-info')
      const fiscalData = await fiscalResponse.json()
      const currentFiscalInfo = fiscalData.fiscalInfo || {
        fiscal_year: new Date().getFullYear(),
        settlement_month: 3,
        bank_balance: 5000000
      }

      // ローカル変数として設定（stateのfiscalInfoではなく）
      const fiscalInfoForCalculation = currentFiscalInfo

      // 分析・レポートと同じ計算ロジックを使用
      const monthlyRevenue = calculateMonthlyRevenue(
        projects || [],
        clients || [],
        caddonBillings || [],
        fiscalInfoForCalculation
      )

      const monthlyCost = calculateMonthlyCost(
        costEntries || [],
        projects || []
      )

      // 予測データを生成
      if (monthlyRevenue.length > 0 || monthlyCost.length > 0) {
        const cashFlowData: CashFlowData[] = []
        const fiscalYearStart = currentFiscalInfo.settlement_month + 1

        for (let i = 0; i < 12; i++) {
          const month = ((fiscalYearStart - 1 + i) % 12) + 1
          const year = currentFiscalInfo.fiscal_year + Math.floor((fiscalYearStart - 1 + i) / 12)

          const revenueData = monthlyRevenue.find(r => r.month === month && r.year === year)
          const costData = monthlyCost.find(c => c.month === month && c.year === year)

          const inflow = revenueData?.amount || 0
          const outflow = costData?.amount || 0
          const balance = inflow - outflow + (i > 0 ? cashFlowData[i-1].balance : currentFiscalInfo.bank_balance)

          cashFlowData.push({
            date: `${year}-${month.toString().padStart(2, '0')}-01`,
            inflow: Math.round(inflow),
            outflow: Math.round(outflow),
            balance: Math.round(balance)
          })
        }

        setCashFlowData(cashFlowData)
      } else {
        // サンプルデータを設定（実際のデータがない場合）
        const sampleCashFlow: CashFlowData[] = []
        // 決算月の翌月から開始
        const settlementMonth = fiscalInfoForCalculation.settlement_month || 3 // デフォルトは3月決算
        const currentYear = new Date().getFullYear()
        const startDate = new Date(currentYear, settlementMonth, 1) // 決算月の翌月の1日
        const initialBalance = fiscalInfoForCalculation.bank_balance || 5000000

        for (let i = 0; i < 12; i++) {
          const date = new Date(startDate)
          date.setMonth(startDate.getMonth() + i)

          // 月別の季節性係数（建設業向け）
          const month = date.getMonth() + 1
          let seasonalFactor = 1.0

          // 年度末（3月）は集中入金・支出
          if (month === 3) seasonalFactor = 1.3
          // 年末（12月）はボーナス・賞与支給
          else if (month === 12) seasonalFactor = 1.2
          // 年初（1月）は入金減少
          else if (month === 1) seasonalFactor = 0.8
          // 夏期休暇（8月）は業務減少
          else if (month === 8) seasonalFactor = 0.9

          const baseInflow = (15000000 + Math.random() * 10000000) * seasonalFactor
          const baseOutflow = (12000000 + Math.random() * 8000000) * seasonalFactor
          const balance = baseInflow - baseOutflow + (i > 0 ? sampleCashFlow[i-1].balance : initialBalance)

          sampleCashFlow.push({
            date: date.toISOString().split('T')[0],
            inflow: Math.round(baseInflow),
            outflow: Math.round(baseOutflow),
            balance: Math.round(balance),
          })
        }
        setCashFlowData(sampleCashFlow)
      } else {
        setCashFlowData(predictionData.predictions.map(p => ({
          date: p.date,
          inflow: p.predicted_inflow,
          outflow: p.predicted_outflow,
          balance: p.predicted_balance,
        })))
      }

      // 支払いデータを設定（サンプルデータを使用）
      setPaymentData([
          {
            id: '1',
            vendor: '株式会社A設計',
            amount: 2800000,
            dueDate: '2024-09-15',
            type: '外注費',
            priority: 8,
            negotiable: false,
          },
          {
            id: '2',
            vendor: 'B測量事務所',
            amount: 1200000,
            dueDate: '2024-09-20',
            type: '測量費',
            priority: 6,
            negotiable: true,
          },
          {
            id: '3',
            vendor: 'C建設コンサルタント',
            amount: 3500000,
            dueDate: '2024-09-25',
            type: '委託費',
            priority: 9,
            negotiable: false,
          },
          {
            id: '4',
            vendor: '人件費（9月分）',
            amount: 4200000,
            dueDate: '2024-09-30',
            type: '人件費',
            priority: 10,
            negotiable: false,
          },
        ])
      } else {
        // APIから取得した予測データをキャッシュフローデータとして設定
        setCashFlowData(predictionData.predictions.map(p => ({
          date: p.date,
          inflow: p.predicted_inflow,
          outflow: p.predicted_outflow,
          balance: p.predicted_balance
        })))

        // サンプル支払いデータを設定
        setPaymentData([
          {
            id: '1',
            vendor: '人件費（8月分）',
            amount: 3800000,
            dueDate: '2024-08-31',
            type: '人件費',
            priority: 10,
            negotiable: false,
          },
          {
            id: '2',
            vendor: '材料費',
            amount: 2500000,
            dueDate: '2024-08-25',
            type: '材料費',
            priority: 8,
            negotiable: true,
          },
          {
            id: '3',
            vendor: '委託費',
            amount: 1800000,
            dueDate: '2024-08-20',
            type: '委託費',
            priority: 9,
            negotiable: false,
          },
        ])
      }
    } catch (error) {
      console.error('Error fetching cash flow data:', error)
    } finally {
      setLoading(false)
    }
  }

  const fetchFiscalInfo = async () => {
    try {
      const response = await fetch('/api/fiscal-info')
      if (response.ok) {
        const data = await response.json()
        if (data.fiscalInfo) {
          setFiscalInfo(data.fiscalInfo)
        }
      }
    } catch (error) {
      console.error('決算情報取得エラー:', error)
    }
  }

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('ja-JP', {
      style: 'currency',
      currency: 'JPY',
      minimumFractionDigits: 0,
    }).format(amount)
  }

  const formatDate = (date: string) => {
    return new Date(date).toLocaleDateString('ja-JP', {
      month: 'short',
      day: 'numeric',
    })
  }

  const getPriorityColor = (priority: number) => {
    if (priority >= 9) return 'text-red-600 bg-red-100'
    if (priority >= 7) return 'text-yellow-600 bg-yellow-100'
    return 'text-green-600 bg-green-100'
  }

  const getPriorityLabel = (priority: number) => {
    if (priority >= 9) return '高'
    if (priority >= 7) return '中'
    return '低'
  }

  const totalOutflow = paymentData.reduce((sum, payment) => sum + payment.amount, 0)
  const highPriorityPayments = paymentData.filter(p => p.priority >= 8)
  const negotiableAmount = paymentData.filter(p => p.negotiable).reduce((sum, p) => sum + p.amount, 0)

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600"></div>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      {/* ページヘッダー */}
      <div>
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-2xl font-bold text-gray-900 flex items-center gap-2">
              <DollarSign className="h-8 w-8 text-green-600" />
              資金管理
            </h1>
            <p className="mt-1 text-sm text-gray-500">
              キャッシュフロー予測と支払い管理を行います
            </p>
          </div>
          <div className="flex items-center space-x-2">
            <Brain className="h-5 w-5 text-blue-600" />
            <span className="text-sm font-medium text-gray-700">AI分析対応</span>
          </div>
        </div>
      </div>

      {/* 統計カード */}
      <div className="grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-4">
        {/* 銀行残高 */}
        <div className="bg-white overflow-hidden shadow rounded-lg">
          <div className="p-5">
            <div className="flex items-center">
              <div className="flex-shrink-0">
                <DollarSign className="h-6 w-6 text-green-400" />
              </div>
              <div className="ml-5 w-0 flex-1">
                <dl>
                  <dt className="text-sm font-medium text-gray-500 truncate">
                    銀行残高
                  </dt>
                  <dd className="text-lg font-medium text-gray-900">
                    {fiscalInfo ? formatCurrency(fiscalInfo.bank_balance) : '未設定'}
                  </dd>
                  {fiscalInfo && (
                    <dd className="text-xs text-gray-500 mt-1">
                      {fiscalInfo.fiscal_year}年度 第{fiscalInfo.current_period}期
                    </dd>
                  )}
                </dl>
              </div>
            </div>
          </div>
        </div>

        <div className="bg-white overflow-hidden shadow rounded-lg">
          <div className="p-5">
            <div className="flex items-center">
              <div className="flex-shrink-0">
                <DollarSign className="h-6 w-6 text-blue-400" />
              </div>
              <div className="ml-5 w-0 flex-1">
                <dl>
                  <dt className="text-sm font-medium text-gray-500 truncate">
                    今月支払い予定
                  </dt>
                  <dd className="text-lg font-medium text-gray-900">
                    {formatCurrency(totalOutflow)}
                  </dd>
                </dl>
              </div>
            </div>
          </div>
        </div>

        <div className="bg-white overflow-hidden shadow rounded-lg">
          <div className="p-5">
            <div className="flex items-center">
              <div className="flex-shrink-0">
                <AlertTriangle className="h-6 w-6 text-red-400" />
              </div>
              <div className="ml-5 w-0 flex-1">
                <dl>
                  <dt className="text-sm font-medium text-gray-500 truncate">
                    高優先度支払い
                  </dt>
                  <dd className="text-lg font-medium text-gray-900">
                    {highPriorityPayments.length}件
                  </dd>
                </dl>
              </div>
            </div>
          </div>
        </div>

        <div className="bg-white overflow-hidden shadow rounded-lg">
          <div className="p-5">
            <div className="flex items-center">
              <div className="flex-shrink-0">
                <Target className="h-6 w-6 text-green-400" />
              </div>
              <div className="ml-5 w-0 flex-1">
                <dl>
                  <dt className="text-sm font-medium text-gray-500 truncate">
                    交渉可能金額
                  </dt>
                  <dd className="text-lg font-medium text-gray-900">
                    {formatCurrency(negotiableAmount)}
                  </dd>
                </dl>
              </div>
            </div>
          </div>
        </div>

        <div className="bg-white overflow-hidden shadow rounded-lg">
          <div className="p-5">
            <div className="flex items-center">
              <div className="flex-shrink-0">
                <Zap className="h-6 w-6 text-yellow-400" />
              </div>
              <div className="ml-5 w-0 flex-1">
                <dl>
                  <dt className="text-sm font-medium text-gray-500 truncate">
                    AI予測信頼度
                  </dt>
                  <dd className="text-lg font-medium text-gray-900">
                    87%
                  </dd>
                </dl>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div className="grid grid-cols-1 gap-6 lg:grid-cols-2">
        {/* キャッシュフロー予測グラフ */}
        <div className="bg-white shadow rounded-lg p-6">
          <h3 className="text-lg font-medium text-gray-900 mb-4 flex items-center gap-2">
            <Calendar className="h-5 w-5" />
            キャッシュフロー予測（決算月の翌月から12ヶ月）
          </h3>
          <ResponsiveContainer width="100%" height={300}>
            <LineChart data={cashFlowData}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis
                dataKey="date"
                tickFormatter={(date) => {
                  const d = new Date(date)
                  return `${d.getMonth() + 1}月`
                }}
                fontSize={12}
              />
              <YAxis
                tickFormatter={(value) => `${(value / 1000000).toFixed(0)}M`}
                fontSize={12}
              />
              <Tooltip
                formatter={(value: number, name: string) => [
                  formatCurrency(value),
                  name === 'inflow' ? '入金' : name === 'outflow' ? '支出' : '残高'
                ]}
                labelFormatter={(date) => `日付: ${formatDate(date)}`}
              />
              <Line dataKey="inflow" stroke="#10B981" name="inflow" strokeWidth={2} />
              <Line dataKey="outflow" stroke="#EF4444" name="outflow" strokeWidth={2} />
              <Line dataKey="balance" stroke="#3B82F6" name="balance" strokeWidth={2} />
            </LineChart>
          </ResponsiveContainer>
        </div>

        {/* AI予測・警告 */}
        <div className="bg-white shadow rounded-lg p-6">
          <h3 className="text-lg font-medium text-gray-900 mb-4">
            AI分析・予測
          </h3>
          <div className="space-y-4">
            <div className="flex items-start space-x-3 p-3 bg-red-50 rounded-lg">
              <AlertTriangle className="h-5 w-5 text-red-400 mt-0.5" />
              <div>
                <p className="text-sm font-medium text-red-800">
                  資金ショートリスク
                </p>
                <p className="text-sm text-red-700">
                  3ヶ月後に資金ショートの可能性があります（信頼度: 78%）。
                  早期の資金調達をお勧めします。
                </p>
              </div>
            </div>
            
            <div className="flex items-start space-x-3 p-3 bg-yellow-50 rounded-lg">
              <TrendingDown className="h-5 w-5 text-yellow-400 mt-0.5" />
              <div>
                <p className="text-sm font-medium text-yellow-800">
                  支払い最適化提案
                </p>
                <p className="text-sm text-yellow-700">
                  B測量事務所への支払いを1週間延期することで、
                  キャッシュフローが改善されます。
                </p>
              </div>
            </div>

            <div className="flex items-start space-x-3 p-3 bg-blue-50 rounded-lg">
              <TrendingUp className="h-5 w-5 text-blue-400 mt-0.5" />
              <div>
                <p className="text-sm font-medium text-blue-800">
                  収入予測
                </p>
                <p className="text-sm text-blue-700">
                  来月の売上入金は過去データから1,800万円と予測されます。
                  契約完了プロジェクトからの入金が見込まれます。
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* 支払いスケジュール */}
      <div className="bg-white shadow rounded-lg">
        <div className="px-6 py-4 border-b border-gray-200">
          <h3 className="text-lg font-medium text-gray-900">支払いスケジュール</h3>
          <p className="mt-1 text-sm text-gray-500">
            今後の支払い予定と優先度を確認できます
          </p>
        </div>
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  支払い先
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  金額
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  支払い期日
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  種別
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  優先度
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  交渉可否
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {paymentData.map((payment) => (
                <tr key={payment.id} className="hover:bg-gray-50">
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="text-sm font-medium text-gray-900">
                      {payment.vendor}
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="text-sm text-gray-900">
                      {formatCurrency(payment.amount)}
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="text-sm text-gray-900">
                      {new Date(payment.dueDate).toLocaleDateString('ja-JP')}
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="text-sm text-gray-900">
                      {payment.type}
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getPriorityColor(payment.priority)}`}>
                      {getPriorityLabel(payment.priority)}
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                      payment.negotiable ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'
                    }`}>
                      {payment.negotiable ? '可能' : '不可'}
                    </span>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* AI強化資金分析 */}
      <AIEnhancedCashFlow />
    </div>
  )
}
